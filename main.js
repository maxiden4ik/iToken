import axios from 'axios';
const wait = ms => new Promise(resolve => setTimeout(resolve, ms))
import { Telegraf, session } from "telegraf"; // –ë–∏–±–ª–∏—Ç–µ–∫–∞ –¢–µ–ª–µ–≥—Ä–∞–º–∞.
import { fmt, bold, code, link } from 'telegraf/format';

import { FACTORY_ADDRESS, INIT_CODE_HASH } from '@uniswap/v2-sdk'
import { pack, keccak256 } from '@ethersproject/solidity'
import { getCreate2Address } from '@ethersproject/address'

const chatId = -1002057713225
const token = '6747283089:AAF4GDLRpbyHnRpw2t92PG6iR8Oth5PGat8' // –¢–æ–∫–µ–Ω –¥–ª—è –¢–µ–ª–µ–≥—Ä–∞–º –±–æ—Ç–∞.
const bot = new Telegraf(token); // –°–æ–∑–¥–∞–Ω–∏–µ –±–æ—Ç–∞.

bot.use(session())
console.log('–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω.')
// bot.telegram.sendMessage(989966856, 'start')
const txnHashs = []

while (true) {
    try {
    const transactions = (await axios.request({
        method: 'post',
        url: "https://mainnet.infura.io/v3/50994bfe9e0e40f7a74e2fbbc7d915c2",
        headers: {
            "Content-Type": "application/json",
        },
        data: {
            "jsonrpc":"2.0",
            "method":"eth_getBlockByNumber",
            "params":["latest", true],
            "id":1
        }
    })).data.result.transactions

    for (const transaction of transactions) {
        if (transaction.to == null) {
            if (!(txnHashs.includes(transaction.hash))) {
                txnHashs.push(transaction.hash)

                const contractAddress = (await axios.request({
                    method: 'post',
                    url: "https://mainnet.infura.io/v3/50994bfe9e0e40f7a74e2fbbc7d915c2",
                    headers: {
                        "Content-Type": "application/json",
                    },
                    data: {
                        "jsonrpc":"2.0",
                        "method":"eth_getTransactionReceipt",
                        "params": [transaction.hash],
                        "id":1
                    }
                })).data.result.contractAddress
                
                async function getTokenInfo(contractAddress) {
                    for (let attempt = 0; attempt < 10; attempt++) {
                        const response = (await axios.get(`https://api.etherscan.io/api?module=token&action=tokeninfo&contractaddress=${contractAddress}&apikey=26D6GVX57KX2MQKF8RHHSAFTPQC8ME7NH7`)).data.result
                        if (response == 'Token info not found') {
                            await wait(1000)
                        } else {
                            return response[0]
                        } 
                    }
                    return false
                }

                const tokenInfo = await getTokenInfo(contractAddress)

                if (!tokenInfo.tokenName || !tokenInfo.symbol || !tokenInfo.totalSupply || !tokenInfo.divisor || !tokenInfo.totalSupply) break;

                const mainMesage = await bot.telegram.sendMessage(chatId, 
fmt`üê≥ ${bold`Contract deployed`}

 ${bold`${tokenInfo.tokenName} (${tokenInfo.symbol})`}
 ‚Ä¢ Address: ${code`${contractAddress}`}
 ‚Ä¢ Creator: ${code`${transaction.from}`}

 Total Supply: ${bold`${Math.round(tokenInfo.totalSupply / 10**tokenInfo.divisor).toLocaleString('de')}`} (+ ${tokenInfo.divisor} decimals)
`)

                


                async function verifySourceCode(contractAddress, tokenInfo, mainMesage) {
                    for (let attempt = 0; attempt < 1800; attempt++) {
                        const sourceCode = await checkSourceCodeVerified(contractAddress)
                        if (sourceCode) {
                            const urlEtherScanCode = `https://etherscan.io/token/${token.address}#code`

                            return await bot.telegram.sendMessage(chatId, fmt`
${bold`üìó Source code verified`}

${bold`${tokenInfo.tokenName} (${tokenInfo.symbol})`}
‚Ä¢ Address: ${code`${contractAddress}`}

${link('Etherscan', urlEtherScanCode)} ${sourceCode?.website ? link('Website', sourceCode.website) : ''}${sourceCode?.website ? ' ' : ''}${sourceCode?.telegram ? link('Telegram', sourceCode.telegram) : ''}${sourceCode?.telegram ? ' ' : ''}${sourceCode?.twitter ? link('Twitter', sourceCode.twitter) : sourceCode.twitter}`,
{ reply_to_message_id: mainMesage.message_id }
                            )
                        } else {
                            // console.log(sourceCode, tokenInfo.tokenName)
                            await wait(5000)
                        } 
                    }
                    return false
                }
                verifySourceCode(contractAddress, tokenInfo, mainMesage)



                async function parseLaunching(address) {
                    for (let attempt = 0; attempt < 150; attempt++) {
                    const pair1 = getCreate2Address(FACTORY_ADDRESS,keccak256(['bytes'], [pack(['address', 'address'], [address, '0xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2'])]),INIT_CODE_HASH)
                    const pair2 = getCreate2Address(FACTORY_ADDRESS,keccak256(['bytes'], [pack(['address', 'address'], ['0xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2', address])]),INIT_CODE_HASH)
                    
                    function get_defined_request(pair) {
                        return {
                        method: 'post',
                        url: "https://graph.defined.fi/graphql",
                        data: { 
                            query: `{
                                getDetailedPairStats(
                                networkId: 1
                                pairAddress: "${pair}"
                                ) {
                                tokenOfInterest
                                pair {
                                    token0
                                    token1
                                    pooled {
                                    token0
                                    token1
                                    }
                                }
                                }
                            
                            }`
                        },
                        headers: {
                            "Content-Type": "application/json",
                            "Authorization": "242df15f9343a6fada5bc34868e17bd4eb21c458"
                        }
                        }
                    }
                    
                    try {
                        const pair1Response = (await axios.request(get_defined_request(pair1)))?.data?.data?.getDetailedPairStats
                        await wait(500)
                        const pair2Response = (await axios.request(get_defined_request(pair2)))?.data?.data?.getDetailedPairStats
                    
                        if (pair1Response || pair2Response) {
                            const urlEtherScanCode = `https://etherscan.io/token/${address}#code`
                        
                            getLpLocker(pair1Response ? pair1 : pair2, tokenInfo.divisor)

                            console.log('‚≠êÔ∏è LAUNCHING', tokenInfo.tokenName)
                            return await bot.telegram.sendMessage(chatId, fmt`
${bold`‚≠êÔ∏è Launching`}

${bold`${tokenInfo.tokenName} (${tokenInfo.symbol})`}
‚Ä¢ Address: ${code`${address}`}
‚Ä¢ Pair: ${code`${pair1Response ? pair1 : pair2}`}

${link('Etherscan', urlEtherScanCode)}`,
                    { reply_to_message_id: mainMesage.message_id })



                        } else {
                            await wait(5000)
                        } 
                    } catch (e) {
                        console.log(e)
                    }
                    }
                    return false
                }

                parseLaunching(contractAddress)
  



                async function getLpLocker(pairAddress, decimals) {
                    console.log('checking this lp locked....')
                    try {
                        const totalSupply = (await axios.get(`https://api.etherscan.io/api?module=stats&action=tokensupply&contractaddress=${pairAddress}&apikey=26D6GVX57KX2MQKF8RHHSAFTPQC8ME7NH7`)).data.result // –ü–æ–ª—É—á–µ–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç–∏ —Å–∞–º–æ–π –ø–∞—Ä—ã, –∞ –Ω–µ —Ç–æ–∫–µ–Ω–∞ —Å Etherscan.
                        if (!totalSupply) return false // –ï—Å–ª–∏ –∑–Ω–∞—á–µ–Ω–∏–µ –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç–∏ –ø–∞—Ä—ã –Ω–µ –±—ã–ª–æ –ø–æ–ª—É—á–µ–Ω–æ, –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å –æ—à–∏–±–∫—É false.
                
                        const lpHolders = await getHolders(pairAddress, decimals) // –ü–æ–ª—É—á–Ω–∏–µ –≤—Å–µ—Ö —Ö–æ–ª–¥–µ—Ä–æ–≤ –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç–∏ –ø–∞—Ä—ã.
                
                        if (lpHolders.length == 0) return false // –ï—Å–ª–∏ —Ö–æ–ª–¥–µ—Ä–æ–≤ –Ω–µ –±—ã–ª–æ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ, –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å –æ—à–∏–±–∫—É false.
                        const lpLocker = [lpHolders[0][0], (lpHolders[0][1]) / (totalSupply / 10**decimals) * 100] // –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–ø-1 —Ö–æ–ª–¥–µ—Ä–∞ –∏ –∑–∞–Ω–µ—Å–µ–Ω–∏–µ –µ–≥–æ –≤ –æ—Ç–¥–µ–ª—å–Ω—ã–π –º–∞—Å—Å–∏–≤.
                
                        // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–æ–ø-1 —Ö–æ–ª–¥–µ—Ä–∞ lpLocker –Ω–∞ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ –∞–¥—Ä–µ—Å–æ–≤ –∫–æ—à–µ–ª—å–∫–æ–≤ —Å –ø–µ—Ä–µ—á–∏—Å–ª–µ–Ω–Ω—ã–º–∏ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞–º–∏ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç–∏.
                        if (lpLocker[0] == '0xe2fe530c047f2d85298b07d9333c05737f1435fb') lpLocker[0] = 'TrustSwap: Team Finance Lock'
                        if (lpLocker[0] == '0x663a5c229c09b049e36dcc11a9b0d4a8eb9db214') lpLocker[0] = 'UNCX Network'
                        if (lpLocker[0] == '0x000000000000000000000000000000000000dead') lpLocker[0] = 'dead'
                        if (lpLocker[0].startsWith('0x')) return false

                        return await bot.telegram.sendMessage(chatId, fmt`
${bold`üî• Lp Locked`}

${bold`${tokenInfo.tokenName} (${tokenInfo.symbol})`}
‚Ä¢ Address: ${code`${address}`}
‚Ä¢ ${lpLocker[0]} - ${lpLocker}%

${link('Etherscan', urlEtherScanCode)}`,
                { reply_to_message_id: mainMesage.message_id })

                    } catch (e) {
                        console.log('üìï –í–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞ –≤ –±–ª–æ–∫–µ –ø–æ–ª—É—á–µ–Ω–∏—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç–∏.')
                    }
                }




            }
        }
    }

    await wait(1000)
    } catch (e) {
        console.log(e)
    }
}




async function checkSourceCodeVerified(address) {
    try {
        const banned_resources = [
            'github', 'wikipedia', 'hardhat', 'ethereum.org',
            'zeppelin', 'readthedocs', 'consensys', 'metadrop',
            'theverge', 'medium'
        ]

        // –°–æ–∑–¥–∞–Ω–∏–µ –∏ –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞
        const response = (await axios.get(`https://api.etherscan.io/api?module=contract&action=getsourcecode&address=${address}&apikey=I42WBTQDF5JSSWARWCNYFU2DUI1IFGQWD1`)).data.result[0]
        if (response.ABI == 'Contract source code not verified') return false // –í–æ–∑–≤—Ä–∞—â–∞—Ç—å false, –µ—Å–ª–∏ –∏—Å—Ö–æ–¥–Ω—ã–π –∫–æ–¥ –Ω–µ –±—ã–ª –ø–æ–ª—É—á–µ–Ω.
        const content = (response.SourceCode).split('\n') // –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∏—Å—Ö–æ–¥–Ω–æ–≥–æ –∫–æ–¥–∞ —Ç–æ–∫–µ–Ω–∞.
    
        // –ö–æ–¥ –º–æ–∂–µ—Ç –±—ã—Ç—å –≤ –≤–∏–¥–µ –æ–±—ã—á–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞: function()..., –∞ –º–æ–∂–µ—Ç –∏ –±—ã—Ç—å –≤ –≤–∏–¥–µ –æ–±—ä–µ–∫—Ç–∞: "lang": "solidity", "content": function()...,
        // –∏ –∑–¥–µ—Å—å —Ä–µ–≥–µ—Å—Ç—Ä–∏—Ä—É—é—Ç—Å—è –æ–±–∞ —Å–ª—É—á–∞—è, —á—Ç–æ–±—ã –≤ —Å–ª—É—á–∞–µ —á–µ–≥–æ –Ω–µ —É–ø—É—Å–∫–∞—Ç—å –∏—Å—Ö–æ–¥–Ω–æ–≥–æ –∫–æ–¥–∞.
        const contentIndex = content.indexOf(content.find(element => element.includes('\"content\"'))) || '-1'; // –ò–Ω–¥–µ–∫—Å "content" –≤ –∫–æ–¥–µ –≤ –º–∞—Å—Å–∏–≤–µ –æ—Ç–≤–µ—Ç–∞ (2-–æ–π —Å–ª—É—á–∞–π). –ò–∑–Ω–∞—á–∞–ª—å–Ω–æ: -1.
    
        const text = (contentIndex == -1) ? content : content[contentIndex].split('\\n') // –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∏—Å—Ö–æ–¥–Ω–æ–≥–æ –∫–æ–¥–∞ —Å–æ–∑–¥–∞–Ω–∏–µ–º –º–∞—Å—Å–∏–≤–∞ –¥–ª—è –∫–∞–∂–¥–æ–π –æ—Ç–¥–µ–ª—å–Ω–æ–π —Å—Ç—Ä–æ—á–∫–∏.
        const links = text.filter(element => element.includes('https://')).map(link => link.trim()); // –û–±—ä—è–≤–ª–µ–Ω–∏–µ –º–∞—Å—Å–∏–≤–∞ –¥–ª—è –ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞—é—â–∏—Ö—Å—è —Å—Å—ã–ª–æ–∫ –Ω–∞ —Ä–µ—Å—É—Ä—Å—ã.
    
        const item = new Object; // –°–æ–∑–¥–∞–Ω–∏–µ –æ–±—ä–µ–∫—Ç–∞ –¥–ª—è –ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞—é—â–∏—Ö—Å—è —Å—Å—ã–ª–æ–∫ –Ω–∞ —Ä–µ—Å—É—Ä—Å—ã.
        for (const rawLink of links) {
            // –û–±—Ä–∞–±–æ—Ç–∫–∞ raw-—Å—Å—ã–ª–∫–∏.
            let link = rawLink.slice(rawLink.indexOf('https://'))
            if (link.indexOf('\\') > 0) link = link.slice(0, link.indexOf('\\'))
            if (link.indexOf(' ') > 0) link = link.slice(0, (link.indexOf(' ')))
    
            // –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Å—Å—ã–ª–æ–∫.
            if (link.includes('t.me')) { item.telegram = link; continue; } // –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –¢–ì-–∫–∞–Ω–∞–ª–∞.
            if (link.includes('twitter.com') || link.includes('x.com') || link.includes('X.com')) { item.twitter = link; continue; } // –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –¢–≤–∏—Ç—Ç–µ—Ä–∞.
            if (!banned_resources.some(element => link.includes(element))) item.website = link; // –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Å–∞–π—Ç–∞.
            
            if (Object.keys(item).length == 3) break; // –ù–µ –ø—Ä–æ–≤–µ—Ä—è—Ç—å —Å—Å—ã–ª–∫–∏ –¥–∞–ª—å—à–µ, –µ—Å–ª–∏ –æ–±—ä–µ–∫—Ç —Å–æ –≤—Å–µ–º–∏ —Ä–µ—Å—É—Ä—Å–∞–º–∏ –ø–æ–ª–Ω–æ—Å—Ç—å—é —Å–æ–±—Ä–∞–Ω.
        }
    
        // –í–æ–∑–≤—Ä–∞—Ç –¥–∞–Ω–Ω—ã—Ö
        if (Object.keys(item).length == 0) return true // –ï—Å–ª–∏ —Å—Å—ã–ª–æ–∫ –Ω–µ –±—ã–ª–æ –Ω–∞–π–¥–µ–Ω–æ, —Ç–æ –ø—Ä–æ—Å—Ç–æ –≤–µ—Ä–Ω—É—Ç—å true, –∏–±–æ –∏—Å—Ö–æ–¥–Ω—ã–π –∫–æ–¥ –±—ã–ª –ø–æ–ª—É—á–µ–Ω, –∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ –∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω
        return item // –ï—Å–ª–∏ —Å—Å—ã–ª–∫–∏ –±—ã–ª–∏ –Ω–∞–π–¥–µ–Ω—ã, –≤—ã–≤–µ—Å—Ç–∏ –æ–±—ä–µ–∫—Ç —Å —Å—Å—ã–ª–∫–∞–º–∏, –∫–æ—Ç–æ—Ä—ã–π –±—É–¥–µ—Ç —Ä–∞–≤–µ–Ω true –≤ Boolean, —á—Ç–æ–±—ã –ø—Ä–æ—à–ª–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –Ω–∞–ª–∏—á–∏—è –∏—Å—Ö–æ–¥–Ω–æ–≥–æ –∫–æ–¥–∞
    } catch (e) {
        console.log(e)
    }
}
